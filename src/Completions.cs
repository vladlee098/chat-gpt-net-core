using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace src.ChatGpt
{
    /// Full doc can be found here:
    /// https://beta.openai.com/docs/api-reference/completions/create
    ///
    public class completions
    {
        // ID of the model to use. You can use the List models API to see all of your available models, or see our Model overview for descriptions of them.
        public string model {get; set; }
        
        // string or array
        // The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
        // Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
        public object prompt {get; set; }

        // The suffix that comes after a completion of inserted text.
        public string suffix {get; set; }

        // The maximum number of tokens to generate in the completion.
        public int max_tokens {get; set; }

        // What sampling temperature to use. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.
        // We generally recommend altering this or top_p but not both.
        public double temperature {get; set; }

        // An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
        public double top_p {get; set; }

        // How many completions to generate for each prompt.
        public int n {get; set; }

        // Whether to stream back partial progress. If set, tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.
        public bool stream {get; set; }

        // Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens. For example, if logprobs is 5, the API will return a list of the 5 most likely tokens. The API will always return the logprob of the sampled token, so there may be up to logprobs+1 elements in the response.
        public int logprobs {get; set; }

        // Echo back the prompt in addition to the completion.
        public bool echo {get; set; }

        // string or array, Defaults to null
        // Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
        public object prompt {get; set; }

        // Optional, Defaults to 0
        // Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
        public double presence_penalty {get; set; }

        // Optional, Defaults to 0
        // Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
        public double presence_penalty {get; set; }

        // Optional, Defaults to 1
        // Generates best_of completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
        // When used with n, best_of controls the number of candidate completions and n specifies how many to return â€“ best_of must be greater than n.
        public int best_of {get; set; }

        // map, Optional, Defaults to null
        // Modify the likelihood of specified tokens appearing in the completion.
        // Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this tokenizer tool (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
        // As an example, you can pass {"50256": -100} to prevent the <|endoftext|> token from being generated.
        public object logit_bias {get; set; }

        // string, Optional        
       public string user {get; set; }

    }
}